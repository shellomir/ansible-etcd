###########################################################################
### Ansible-Managed                                                     ###
###########################################################################

{% set cluster_members = [] %}
{% for host in groups['etcd_nodes'] %}
{%   set member_name = host %}
{%   set member_ip = hostvars[host].ansible_default_ipv4.address %}
{%   set member_url = "https://" ~ member_ip ~ ":" ~ etcd_peering_listen_port|string %}
{%   set _ = cluster_members.append(member_name ~ "=" ~ member_url) %}
{% endfor %}

# Human-readable name for this member.
name: "{{ ansible_fqdn }}"

# Path to the data directory.
data-dir: "{{ etcd_data_dir }}"

# Path to the dedicated wal directory.
wal-dir: "{{ etcd_wal_dir }}"

# Number of committed transactions to trigger a snapshot to disk.
snapshot-count: {{ etcd_snapshot_count }}

# Time (in milliseconds) of a heartbeat interval.
heartbeat-interval: {{ etcd_heartbeat_interval_ms }}

# Time (in milliseconds) for an election to timeout.
election-timeout: {{ etcd_election_timeout_ms }}

# Raise alarms when backend size exceeds the given quota. 0 means use the
# default quota.
quota-backend-bytes: {{ etcd_quota_backend_bytes }}

# List of comma separated URLs to listen on for peer traffic.
listen-peer-urls: "{{ etcd_listen_peer_urls }}"

# List of comma separated URLs to listen on for client traffic.
listen-client-urls: "{{ etcd_listen_client_urls }}"

# Maximum number of snapshot files to retain (0 is unlimited).
max-snapshots: {{ etcd_max_snapshots }}

# Maximum number of wal files to retain (0 is unlimited).
max-wals: {{ etcd_max_wals }}

# Comma-separated white list of origins for CORS (cross-origin resource sharing).
cors: "{{ etcd_cors }}"

# List of this member's peer URLs to advertise to the rest of the cluster.
# The URLs needed to be a comma-separated list.
initial-advertise-peer-urls: "{{ etcd_initial_advertise_peer_urls }}"

# List of this member's client URLs to advertise to the public.
# The URLs needed to be a comma-separated list.
advertise-client-urls: "{{ etcd_advertise_client_urls }}"

# Discovery URL used to bootstrap the cluster.
discovery: "{{ etcd_discovery_url }}"

# Valid values include 'exit', 'proxy'
discovery-fallback: "{{ etcd_discovery_fallback }}"

# HTTP proxy to use for traffic to discovery service.
discovery-proxy: "{{ etcd_discovery_proxy }}"

# DNS domain used to bootstrap initial cluster.
discovery-srv: "{{ etcd_discovery_srv }}"

# Comma separated string of initial cluster configuration for bootstrapping.
# Example: initial-cluster: "infra0=http://10.0.1.10:2380,infra1=http://10.0.1.11:2380,infra2=http://10.0.1.12:2380"

initial-cluster: "{{ cluster_members | join(',') }}"

# Initial cluster token for the etcd cluster during bootstrap.
initial-cluster-token: "{{ etcd_initial_cluster_token }}"

# Initial cluster state ('new' or 'existing').
initial-cluster-state: "{{ etcd_initial_cluster_state }}"

# Reject reconfiguration requests tat would cause quorum loss.
strict-reconfig-check: {{ etcd_strict_reconfig_check }}

# Enable runtime profiling data via HTTP server
enable-pprof: {{ etcd_enable_pprof }}

# Valid values include 'on', 'readonly', 'off'
proxy: "{{ etcd_proxy_on_off }}"

# Time (in milliseconds) an endpoint will be held in a failed state.
proxy-failure-wait: {{ etcd_proxy_failure_wait_ms }}

# Time (in milliseconds) of the endpoints refresh interval.
proxy-refresh-interval: {{ etcd_proxy_refresh_interval_ms }}
#
# Time (in milliseconds) for a dial to timeout.
proxy-dial-timeout: {{ etcd_proxy_dial_timeout_ms }}

# Time (in milliseconds) for a write to timeout.
proxy-write-timeout: {{ etcd_proxy_write_timeout_ms }}

# Time (in milliseconds) for a read to timeout.
proxy-read-timeout: {{ etcd_proxy_read_timeout_ms }}

client-transport-security:
  # Path to the client server TLS cert file.
  cert-file: "{{ etcd_client_transport_cert_file }}"

  # Path to the client server TLS key file.
  key-file: "{{ etcd_client_transport_key_file }}"

  # Enable client cert authentication.
  client-cert-auth: {{ etcd_client_transport_cert_auth_enabled }}

  # Path to the client server TLS trusted CA cert file.
  trusted-ca-file: "{{ etcd_client_transport_ca_cert_file }}"

  # Client TLS using generated certificates
  auto-tls: {{ etcd_client_transport_auto_tls_enabled }}

peer-transport-security:
  # Path to the peer server TLS cert file.
  cert-file: "{{ etcd_peer_transport_cert_file }}"

  # Path to the peer server TLS key file.
  key-file: "{{ etcd_peer_transport_key_file }}"

  # Enable peer client cert authentication.
  client-cert-auth: {{ etcd_peer_transport_cert_auth_enabled }}

  # Path to the peer server TLS trusted CA cert file.
  trusted-ca-file: "{{ etcd_peer_transport_ca_cert_file }}"

  # Peer TLS using generated certificates.
  auto-tls: {{ etcd_peer_transport_auto_tls_enabled }}


allowed-cn: "{{ etcd_allowed_cn_list | join(',') }}"

{% if allowed_hostname_list is defined and allowed_hostname_list %}
  # Allowed CN for inter peer authentication.
  allowed-hostname: "{{ etcd_allowed_hostname_list | join(',') }}"
{% endif %}

# The validity period of the self-signed certificate, the unit is year.
self-signed-cert-validity: {{ etcd_self_signed_cert_validity_years }}

# Enable debug-level logging for etcd.
log-level: "{{ etcd_log_level }}"
logger: "{{ etcd_logger }}"

# Specify 'stdout' or 'stderr' to skip journald logging even when running under systemd.
log-outputs: [
{{ etcd_log_outputs | join(',\n') | indent(2, true) }}
]

# Force to create a new one member cluster.
force-new-cluster: {{ etcd_force_new_cluster }}

auto-compaction-mode: "{{ etcd_auto_compaction_mode }}"
auto-compaction-retention: "{{ etcd_auto_compaction_retention }}"

# Limit etcd to a specific set of tls cipher suites
cipher-suites: [
{{ etcd_cipher_suites | join(',\n') | indent(2, true) }}
]

# Limit etcd to specific TLS protocol versions 
tls-min-version: "{{ etcd_tls_min_version }}"
tls-max-version: "{{ etcd_tls_max_version }}"
